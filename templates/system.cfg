# Core config file that creates system wide (font-sources) useful strings
#
# 0.1   MJPH     7-DEC-2007     Original

$(!include local.cfg)
# create a list of FONTS from FONTFACES and FONTSTYLES
FONTS |=$(foreach f,$(FONTFACES),$(foreach s,$(FONTSTYLES),$(f)$(if $(map $(s),regular,1),,$(s)),nonl),nonl)
$(!foreach v,$(FONTS),$(FONTVARS))

TEMP=.wsi-temp
TESTTEMP=$(TEMP)/test
SVGTESTTEMP=$(TEMP)/svg

# various commands and their representation in various OSs
COMMANDS_MSWin32=<<EOT
RM|=perl -MExtUtils::Command -e rm_rf
CP|=perl -MExtUtils::Command -e cp
MKDIR|=perl -MExtUtils::Command -e mkpath
TOUCH|=perl -MExtUtils::Command -e touch
GRCOMPILER|='"C:\Program Files\SIL\GrCompiler\GrCompiler.exe"'
Q="
QQ='
EOT

COMMANDS_linux=<<EOT
RM|=rm -fr
CP|=cp
GRCOMPILER|=GDLPP_PREFS='-I/usr/share/grcompiler/' grcompiler
MKDIR|= mkdir -p
TOUCH|=touch
Q='
QQ="
EOT

COMMANDS_cygwin=<<EOT
RM|=rm -fr
CP|=cp
GRCOMPILER|=/cygdrive/c/Program\ Files/Graphite\ Compiler/GrCompiler.exe
MKDIR|= mkdir -p
TOUCH|=touch
Q='
QQ="
EOT
$(!foreach v,dummy,$(COMMANDS_$(.OS)))

# standard files to include in MANIFEST
MANIFEST=<<EOT
$($(v)_SRC)
$($(v)_TARGET)
$($(v)_GDL)
$($(v)_VTP)
$($(v)_AP)
$($(v)_SFD)
$($(v)_LEG)
EOT

$(!if $(exist $(TEMP)),,$(shell mkdir $(TEMP)))

CONFIG_FILE|=$(.CONFIG)
# appropriate files in the doc dir (and doc is fixed) are included and get
# menu items. Notice we don't include the doc/ in the list
DOCS|=$(dir doc,\.pdf$,\.txt$,\.html$)

# Specifies where to find the template directory
TEMPLATE_DIR=$(!or $(and $(env TEMPLATE_DIR),$(exist $(env TEMPLATE_DIR))), $(exist $(TEMPLATE_DIR)), $(sub /[^/]*$,,$(.TEMPLATE_DIR)), $(exist templates), $(exist /usr/share/wsi-autotools/templates))

DUMMY=$(!or $(exist $(TEMPLATE_DIR)), $(error "No template directory exists, either create or link to one or set a TEMPLATE_DIR environment variable"))

# Command to regenerate build tree from templates
AUTOSUB|=perl $(TEMPLATE_DIR)/autosub -c $(CONFIG_FILE) -c $(TEMPLATE_DIR)/system.cfg -d . -x \~  $(TEMPLATE_DIR)/templates

# default tarball name also used for debian package name
TARNAME|=ttf-sil-$(PRODUCT)

# Calculate a x.y.z.w style version number for windows installers
# VCS indicates which version control system is being used so we can get a build number
# VCS can equal: svn, bzr
WINDOWS_MATCH=^\d+\.\d+\.\d+\.\d+
BUILD|=$(!map $(VCS),svn,$(shell svn info | perl -ne $(Q)print if(s/Revision: //o)$(Q)),bzr,$(shell bzr revno))
BUILD|=1
VERSION|=0
WINDOWS_VERSION|=$(or $(match $(VERSION),$(WINDOWS_MATCH)),$(match $(VERSION).$(BUILD),$(WINDOWS_MATCH)), $(match $(VERSION).0.$(BUILD),$(WINDOWS_MATCH)), $(VERSION).0.0.$(BUILD))

# various make templates for smart font building
# Opentype code generation
# if MAKE_OT is set then use MAKEOT_template otherwise try for VOLT_template
# $(f)_OT_DEPENDS gives the extra dependencies for the OT generation
# MAKE_OT is a command that takes an input and output .ttf file
MAKEOT_template=<<EOT
$($(f)_TARGET) :: $($(f)_OT_DEPENDS)
	$(CP) $@ $(TEMP)/$@
	$(MAKE_OT) $(TEMP)/$@ $@
	@-$(RM) $(TEMP)/$@
EOT

# VOLT. Set MAKE_VOLT to override. Rules only added if $(f)_VTP is set which is where the volt source is generated into
# MAKE_VOLT_PARAMS allows for per project configuration of make_volt call
# $(f)_VTP_DEPENDS is a space separated list of per font dependencies for volt compilation
# $(f)_VTP_SRC is the source volt code (if any) that make-volt pulls in
# some shells create output files (>) at the start, so we use a temp file in case _VTP eq _VTP_SRC
VOLT_template=<<EOT
$($(f)_VTP) : $($(f)_AP) $($(f)_SRC) $(if $(map $($(f)_VTP),$($(f)_VTP_SRC),1),,$($(f)_VTP_SRC)) $(VOLT_MAKE_DEPS)
	$(if $($(f)_AP),$(if $(CLASSES_FILE),add_classes -c $(CLASSES_FILE) $(TEMP)/$(f).ap.xml $($(f)_AP)))
$(if $(MAKE_VOLT_INSERT),$(indent $(.TAB),$(call $(MAKE_VOLT_INSERT),$($(f)_SRC),$(TEMP)/$(f).ap.xml,$(f))))
	$(or $(indent $(.TAB),$(MAKE_VOLT)), make_volt $(and $($(f)_VTP_SRC),-i $($(f)_VTP_SRC)) $(MAKE_VOLT_PARAMS) $(and $($(f)_AP),-a $(TEMP)/$(f).ap.xml) -t $($(f)_SRC) > $(TEMP)/$(f).vtp)
	@- $(CP) $(TEMP)/$(f).vtp $@
	@- $(RM) $(TEMP)/$(f).vtp

$($(f)_TARGET) :: $($(f)_VTP) $($(f)_VTP_DEPENDS) $($(f)_TARGET).stamp
	@-$(CP) $@ $(TEMP)/$(f).ttf
	volt2ttf -t $($(f)_VTP) $(VOLT_PARAMS) $(TEMP)/$(f).ttf $@
$(if $(COMPILE_VOLT_INSERT),$(indent $(.TAB),$(call $(COMPILE_VOLT_INSERT),$@,$(f))))
	@-$(RM) $(TEMP)/$(f).ttf

EOT

# Graphite rules
# MAKE_GDL overrides the default make_gdl command
# MAKE_GDL_PARAMS extra parameters to pass to make_gdl (e.g. -l)
# $(f)_GDL_SHARED is the file included into the font .gdl file (if any)
# $(f)_GDL is the generated .gdl file that is compiled into the font. If not set, no graphite rules are included
# $(f)_GDL_DEPENDS is a space separated list of files that can trigger a grcompiler run
# GRCOMPILER the grcompiler command to run
# GRCOMPILER_PARAMS extra parameters to pass to grcompiler
GDL_MAKE_template=<<EOT
$($(f)_GDL) : $($(f)_AP) $(CLASSES_FILE) $($(f)_SRC) $(GDL_MAKE_DEPENDS)
	$(if $($(f)_AP),$(if $(CLASSES_FILE),add_classes -c $(CLASSES_FILE) $($(f)_AP) $(TEMP)/$(f).ap.xml,$(CP) $($(f)_AP) $(TEMP)/$(f).ap.xml))
$(if $(MAKE_GDL_INSERT),$(indent $(.TAB),$(call $(MAKE_GDL_INSERT),$($(f)_SRC),$(TEMP)/$(f).ap.xml,$(f))))
	$(or $(indent $(.TAB),$(MAKE_GDL)),make_gdl $(and $($(f)_GDL_SHARED),-i $(sub [^/]+/,../,$(or $(sub (/?)[^/]*$,$1,$($(f)_GDL)),../))$($(f)_GDL_SHARED)) $(MAKE_GDL_PARAMS) $(and $($(f)_AP),-a $(TEMP)/$(f).ap.xml) $($(f)_SRC) $@)

EOT

SFDAP_template=<<EOT
$($(f)_AP) : $($(f)_SFD)
	sfd2ap $< $@

EOT

GDL_template=<<EOT
$($(f)_TARGET) :: $($(f)_GDL) $($(f)_GDL_SHARED) $($(f)_GDL_DEPENDS) $($(f)_TARGET).stamp
	-ttftable -d graphite $@ $(TEMP)/$(f).ttf
$(if $(GDL_INSERT),$(indent $(.TAB),$(call $(GDL_INSERT),$($(f)_GDL),$(f))))
	@-$(CP) $($(f)_GDL)  $(TEMP)/$(f).gdl
	$(GRCOMPILER) $(GRCOMPILER_PARAMS) $$(DEBUG:1=-d) $(if $(f).gdl,$(TEMP)/$(f).gdl,$($(f)_GDL_SHARED)) $(TEMP)/$(f).ttf $@
	$(if $($(f)_GDL_ERROR),@-$(MV) gdlerr.txt,$($(f)_GDL_ERROR))
	@-$(RM) $(TEMP)/$(f).ttf $(TEMP)/$(f).gdl $(TEMP)/$($(f)_GDL_SHARED)

EOT

LEG_template=<<EOT
$($(f)_SRC) $($(f)_AP) : $(MASTER_XML) $($(f)_LEG)
$(if $(LEG_XML_INSERT),$(indent $(.TAB),$(call $(LEG_XML_INSERT),$(MASTER_XML),$(f))))
	ttfbuilder -c $(or $($(f)_LEG_XML),$(MASTER_XML)) -z $($(f)_AP) $(TTFBUILDER_PARAMS) $($(f)_LEG) $($(f)_SRC)
   $(if $(LEG_INSERT),$(indent $(.TAB),$(call $(LEG_INSERT),$@,$($(f)_AP),$(f))))

EOT

SFDLEG_template=<<EOT
$($(f)_SFD) : $(MASTER_XML) $($(f)_LEG)
	@- $(CP) $@ $(TEMP)/$(f).sfd
$(if $(LEG_XML_INSERT),$(indent $(.TAB),$(call $(LEG_XML_INSERT),$(MASTER_XML),$(f))))
	ttfbuilder -c $(MASTER_XML) $(TTFBUILDER_PARAMS) -z $(TEMP)/$(f).ap.xml $($(f)_LEG) $(TEMP)/$(f).ttf
	$(if $(LEG_INSERT),$(indent $(.TAB),$(call $(LEG_INSERT),$@,$(TEMP)/$(f).ap.xml,$(f))))
	$(FONTFORGE) -lang=ff -c $(Q)Open($$1); Save($$2)$(Q) $(TEMP)/$(f).ttf $@
	perl -e $(Q)system($(QQ)sfdmeld -a $(TEMP)/$(f).ap.xml -p $(TEMP)/$(f).sfd $@ $@$(QQ)) if (-s $(QQ)$(TEMP)/$(f).sfd$(QQ))$(Q)
$(if $(LEG_SFD_INSERT),$(indent $(.TAB),$(call $(LEG_SFD_INSERT),$@,$(f))))
	@- $(RM) $(TEMP)/$(f).sfd $(TEMP)/$(f).ttf $(TEMP)/$(f).ap.xml $($(f)_SFD).stamp

EOT

SFD_template=<<EOT
$($(f)_SFD).stamp : $(MASTER_SFD)
	sfdmeld $< $($(f)_SFD) $($(f)_SFD)
	@$(TOUCH) $@

$($(f)_SRC) : $($(f)_SFD) $($(f)_SFD).stamp
$(if $(SFD_INSERT),$(indent $(.TAB),$(call $(SFD_INSERT),$($(f)_SFD),$(f))))
	$(FONTFORGE) -lang=ff -c $(Q)Open($$1); Generate($$2)$(Q) $($(f)_SFD) $@


EOT

MASTER_template=<<EOT
master : $(MASTER_SFD_SRC)
	$(CP) $< $(MASTER_SFD)

EOT

# debian package handling
DEBIAN_targ=<<EOT
debs/$(f)/$(TARNAME)-$(DEBVERSION)_all.deb : $(TARNAME)_$(VERSION).orig.tar.gz
	@- $(MKDIR) debs/$(f)
	@- $(RM) $(TARNAME)-$(VERSION)
	tar xvzf $(TARNAME)_$(VERSION).orig.tar.gz
	cp -r debian-src $(TARNAME)-$(VERSION)/debian
	dch -D$(f) -v`dpkg-parsechangelog -l$(TARNAME)-$(VERSION)/debian/changelog | sed -ne '/^Version:/s/^Version: //p'`.$(f)1 -c $(TARNAME)-$(VERSION)/debian/changelog Package for $(f)
	cd $(TARNAME)-$(VERSION) && $(DEBUILD)

EOT

DEBIAN_template=<<EOT

debs : $(foreach f,$(DEBARCH),debs/$(f)/$(TARNAME)-$(DEBVERSION)_all.deb,nonl)

$(foreach f,$(DEBARCH),$(DEBIAN_targ))
$(TARNAME)_$(VERSION).orig.tar.gz : $(TARNAME)-$(VERSION).tar.gz
	$(RM) $(TARNAME)-$(VERSION)
	mkdir $(TARNAME)-$(VERSION)
	tar -C $(TARNAME)-$(VERSION) -xzf $<
	tar czf $@ $(TARNAME)-$(VERSION)
	$(RM) $(TARNAME)-$(VERSION)
EOT

DEFOMA_template=<<EOT
debian-src/$(TARNAME).defoma-hints :
	defoma-hints --no-question truetype *.ttf | perl -pe $(Q)s{/path/to/}{/usr/share/fonts/truetype/$(TARNAME)/};$(Q) > $@

EOT

#DEBVERSION=$(shell dpkg-parsechangelog -ldebian-src/changelog | perl -ne 'print $1 if (m/^Version:\s+(.*?)$/o);')
DEBVERSION|=$(VERSION)-1
DESC_LONG|=<<EOT
$(DESC_SHORT)
.
$(COPYRIGHT)
EOT
# extra top level targets
# EXTRA_TARGETS lists top level default targets, space separated
# EXTRA_RULES is a way of adding extra targets to the makefile, along with their rules. Tabs needed
LICENSE_template=<<EOT
all :: $(LICENSE)

$(LICENSE) : $($(index 0,$(FONTS))_TARGET)
	perl $(TEMPLATE_DIR)/bin/ttfgetname -t 13 $($(index 0,$(FONTS))_TARGET) > $@
	$(CP) $@ debian-src/LICENSE

EOT

ALL_template=<<EOT
all :: $(EXTRA_TARGETS)

$(TESTS)
$(EXTRA_RULES)

testclean:
	$(RM) $(TESTTEMP)
	$(RM) test-suite/results
EOT

# There are also extra font specific rules:
# $(f)_DEPENDS is a list of targets to add to the base build dependency for a font
# BUILD_TARGET is the list of command rules to run to build the base target font. No tabs needed
# $(f)_EXTRA_RULES is a way of adding extra font specific targets and rules. Tabs needed
PROGRAM_template_local_build=<<EOT
$($(v)_TARGET) :: $($(v)_TARGET).stamp $($(v)_SRC) $($(v)_DEPENDS)
$(indent $(.TAB),$(call $(BUILD_TARGET),$@))
	@- touch $($(v)_TARGET).stamp
EOT


PROGRAM_template=<<EOT
all :: $($(v)_TARGET)

$(EXTRA_RULES_FONT)

$($(v)_TARGET).stamp :: $($(v)_SRC)
	$(CP) $< $($(v)_TARGET)
	@- touch $@

$($(v)_EXTRA_RULES)

$(if $($(v)_SFD),$(foreach f,$(v),$(SFD_template) $(and $($(v)_LEG),$(MASTER_XML),$(SFDLEG_template))),$(and $($(v)_LEG),$(MASTER_XML),$(foreach f,$(v),$(LEG_template))))
$(or $(and $(MAKE_OT), $(foreach f,$(v),$(MAKEOT_template))),$(and $($(v)_VTP),$(foreach f,$(v),$(VOLT_template))))

$(and $($(v)_GDL),$(foreach f,$(v),$(GDL_MAKE_template)))
$(and $(or $($(v)_GDL),$($(v)_GDL_SHARED)),$(foreach f,$(v),$(GDL_template)))
$(if $(and $($(v)_AP),$($(v)_SFD)),$(foreach f,$(v),$(SFDAP_template)))

$(and $(BUILD_TARGET),$(PROGRAM_template_local_build))

EOT

CLEAN_FILES+=$(.NL)$(foreach v,$(FONTS),$(.TAB)-$$(RM) $($(v)_TARGET) $($(v)_AP) $($(v)_VTP) $($(v)_GDL) $(if $($(v)_LEG),$($(v)_SRC)))
EXTRA_CLEAN_FILES+=$(.NL)$(foreach v,$(FONTS),$(.TAB)@-$$(RM) $(if $($(v)_SFD),$($(v)_SFD).stamp) $($(v)_TARGET).stamp)

# Other useful variables
# EXTRA_DIST are files to distribute with the installer and the make dist
# EXTRA_SRC_DIST are extra files only to include in make dist
# LICENSE is the file that contains the product license information
# DESC_SHORT contains a one line description of the product
# COPYRIGHT contains a one line copyright statement

# Test rules
XETEX |= xetex
XDVIPDFMX |= xdvipdfmx
FONTFORGE |= fontforge

TEST_FILES=$(unique $(!TEST_FILES) $(sub \.h?txt,,$(dir test-suite,\.h?txt$)))
TEST_TEXFILES=$(unique $(!TEST_TEXFILES) $(sub \.htex,,$(dir test-suite,\.htex$)))

TEST_PER_OUTFILE=<<EOT
test :: $(osslash test-suite/results/$(v)_$(t).diff)

$(osslash test-suite/results/$(v)_$(t).diff : $(TESTTEMP)/$(v)_$(t).xdvtxt test-suite/standards/$(v)_$(t).xdvtxt)
	@- diff $+ > $@

$(osslash $(TESTTEMP)/$(v)_$(t).xdvtxt : $(TESTTEMP)/$(v)_$(t).xdv)
	@perl -I $(TEMPLATE_DIR)/lib $(TEMPLATE_DIR)/bin/showdvi -d $< > $@

$(osslash test-suite/standards/$(v)_$(t).xdvtxt) :
	$(CP) $(TESTTEMP)/$(v)_$(t).xdvtxt $@

pdfs :: $(osslash test-suite/$(v)_$(t).pdf)

$(osslash test-suite/$(v)_$(t).pdf : $(TESTTEMP)/$(v)_$(t).xdv)
	$(XDVIPDFMX) -o test-suite/$(v)_$(t).pdf $(TESTTEMP)/$(v)_$(t).xdv

EOT

GRSVG_OPTIONS=--bounding-box -p 16 --page 30 -b white

TEST_PER_INFILEFONT=<<EOT
$(osslash $(TESTTEMP)/$(v)_$(f)_ot.tex : Makefile)
	@- perl -e $(Q)qq/$(v)/=~m/^([a-z]{2,4})_/oi; $$t=qq/:language=$$1/ if ($$1); print qq{\\font\\test=\"[$($(f)_TARGET)]\/ICU:script=$(OT_SCRIPT)$$t\" at 12pt};$(Q) > $@
	@- perl -e $(Q)print $(QQ)\\hoffset=-.2in \\voffset=-.2in \\nopagenumbers \\vsize=10in$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\obeylines$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\test$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\input test-suite/$(v).txt$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\bye$(QQ);$(Q) >> $@

$(osslash $(TESTTEMP)/$(v)_$(f)_gr.tex : Makefile)
	@- perl -e $(Q)qq/$(v)/=~m/^([a-z]{2,4})_/oi; $$t=qq/:language=$$1/ if ($$1); print qq{\\font\\test=\"[$($(f)_TARGET)]\/GR$$t\" at 12pt};$(Q) > $@
	@- perl -e $(Q)print $(QQ)\\hoffset=-.2in \\voffset=-.2in \\nopagenumbers \\vsize=10in$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\obeylines$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\test$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\input test-suite/$(v).txt$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\bye$(QQ);$(Q) >> $@

$(osslash testsvg :: test-suite/results/$(v)_$(f)_gricu.html $(if $(NO_HARFBUZZ),,test-suite/results/$(v)_$(f)_hbicu.html))
$(osslash testsvg_gricu :: test-suite/results/$(v)_$(f)_gricu.html)
$(osslash testsvg_hbicu :: test-suite/results/$(v)_$(f)_hbicu.html)

$(osslash $(SVGTESTTEMP)/$(v)_$(f)_gr.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
$(osslash $(SVGTESTTEMP)/$(v)_$(f)_gr.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
	$(MKDIR) $(SVGTESTTEMP)
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer graphite $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_gr
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer graphite $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_gr

$(osslash $(SVGTESTTEMP)/$(v)_$(f)_icu.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
$(osslash $(SVGTESTTEMP)/$(v)_$(f)_icu.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
	$(MKDIR) $(SVGTESTTEMP)
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer icu $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_icu
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer icu $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_icu

$(osslash $(SVGTESTTEMP)/$(v)_$(f)_hb.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
$(osslash $(SVGTESTTEMP)/$(v)_$(f)_hb.html : Makefile $($(f)_TARGET) test-suite/$(v).txt)
	$(MKDIR) $(SVGTESTTEMP)
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer harfbuzz $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_hb
	grsvg $($(f)_TARGET) -i test-suite/$(v).txt --renderer harfbuzz $(GRSVG_OPTIONS) ${if ${GRSVGLANG},${shell perl -e '"$(v)"=~m/^([a-z]{2,3})_/o; print "--feat lang=$$1" if($$1);'}} -o $(SVGTESTTEMP)/$(v)_$(f)_hb

$(osslash test-suite/results/$(v)_$(f)_gricu.html : $(SVGTESTTEMP)/$(v)_$(f)_icu.html $(SVGTESTTEMP)/$(v)_$(f)_gr.html $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl)
$(osslash test-suite/results/$(v)_$(f)_gricu.html : $(SVGTESTTEMP)/$(v)_$(f)_icu.html $(SVGTESTTEMP)/$(v)_$(f)_gr.html $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl)
	$(MKDIR) test-suite/results
	xsltproc --stringparam left gr --stringparam right icu --stringparam basedir $(.CWD) $(EXTRA_SVG_XSL_SCRIPT_PARAM) $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	xsltproc --stringparam left gr --stringparam right icu --stringparam basedir $(.CWD) $(EXTRA_SVG_XSL_SCRIPT_PARAM) $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	chmod +x $(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	chmod +x $(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	$(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	$(SVGTESTTEMP)/$(v)_$(f)_gricu.sh
	xsltproc --stringparam left gr --stringparam right icu --stringparam basedir $(.CWD) $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $@
	xsltproc --stringparam left gr --stringparam right icu --stringparam basedir $(.CWD) $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $@
	firefox $@

$(osslash test-suite/results/$(v)_$(f)_hbicu.html : $(SVGTESTTEMP)/$(v)_$(f)_icu.html $(SVGTESTTEMP)/$(v)_$(f)_hb.html $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl)
$(osslash test-suite/results/$(v)_$(f)_hbicu.html : $(SVGTESTTEMP)/$(v)_$(f)_icu.html $(SVGTESTTEMP)/$(v)_$(f)_hb.html $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl)
	$(MKDIR) test-suite/results
	xsltproc --stringparam left hb --stringparam right icu --stringparam basedir $(.CWD) $(EXTRA_SVG_XSL_SCRIPT_PARAM) $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	xsltproc --stringparam left hb --stringparam right icu --stringparam basedir $(.CWD) $(EXTRA_SVG_XSL_SCRIPT_PARAM) $(TEMPLATE_DIR)/xsl/createSvgDiffScript.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	chmod +x $(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	chmod +x $(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	$(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	$(SVGTESTTEMP)/$(v)_$(f)_hbicu.sh
	xsltproc --stringparam left hb --stringparam right icu --stringparam basedir $(.CWD) $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $@
	xsltproc --stringparam left hb --stringparam right icu --stringparam basedir $(.CWD) $(TEMPLATE_DIR)/xsl/createSvgDiffHtml.xsl $(SVGTESTTEMP)/$(v)_$(f)_icu.html > $@
	firefox $@

EOT

TEST_PER_TEXINFILEFONT=<<EOT
$(osslash $(TESTTEMP)/$(v)_$(f)_ot.tex : Makefile)
	@- perl -e $(Q)print $(QQ)\\input $(TEMPLATE_DIR)/bin/font-tests.tex\n$(QQ);$(Q) > $@
	@- perl -e $(Q)qq/$(v)/=~m/^([a-z]{2,4})_/oi; $$t=qq/:language=$$1/ if ($$1); print qq|\\testfont{[$($(f)_TARGET)]\/ICU:script=$(OT_SCRIPT)$$t}\n|;$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\input test-suite/$(v).htex\n$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\bye\n$(QQ);$(Q) >> $@

$(osslash $(TESTTEMP)/$(v)_$(f)_gr.tex : Makefile)
	@- perl -e $(Q)print $(QQ)\\input $(TEMPLATE_DIR)/bin/font-tests.tex\n$(QQ);$(Q) > $@
	@- perl -e $(Q)qq/$(v)/=~m/^([a-z]{2,4})_/oi; $$t=qq/:language=$$1/ if ($$1); print qq|\\testfont{[$($(f)_TARGET)]\/GR$$t}\n|;$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\input test-suite/$(v).htex\n$(QQ);$(Q) >> $@
	@- perl -e $(Q)print $(QQ)\\bye\n$(QQ);$(Q) >> $@

EOT

TEST_PER_TXTFONT=<<EOT
$(TEST_PER_INFILEFONT)

$(foreach t,$(foreach q,$(and $(or $(MAKE_OT),$(OT_SCRIPT),$($(f)_VTP)),ot) $(and $(or $($(f)_GDL),$(HAS_GDL)),gr),$(f)_$(q)),$(TEST_PDF_TXT))
$(foreach t,$(foreach q,$(and $(or $(MAKE_OT),$(OT_SCRIPT),$($(f)_VTP)),ot) $(and $(or $($(f)_GDL),$(HAS_GDL)),gr),$(f)_$(q)),$(TEST_PER_OUTFILE))
EOT

TEST_PER_TEXFONT=<<EOT
$(TEST_PER_TEXINFILEFONT)

$(foreach t,$(foreach q,$(and $(or $(MAKE_OT),$(OT_SCRIPT),$($(f)_VTP)),ot) $(and $(or $($(f)_GDL),$(HAS_GDL)),gr),$(f)_$(q)),$(TEST_PDF_HTEX))
$(foreach t,$(foreach q,$(and $(or $(MAKE_OT),$(OT_SCRIPT),$($(f)_VTP)),ot) $(and $(or $($(f)_GDL),$(HAS_GDL)),gr),$(f)_$(q)),$(TEST_PER_OUTFILE))
EOT

TEST_PER_FONT=<<EOT
$(foreach v,$(TEST_FILES),$(TEST_PER_TXTFONT))
$(foreach v,$(TEST_TEXFILES),$(TEST_PER_TEXFONT))
EOT


TEST_PDF_TXT=<<EOT
$(osslash $(TESTTEMP)/$(v)_$(t).xdv : $(TESTTEMP)/$(v)_$(t).tex test-suite/$(v).txt $($(f)_TARGET))
	$(XETEX) --no-pdf --output-directory=$(TESTTEMP) $(TESTTEMP)/$(v)_$(t).tex

EOT
TEST_PDF_HTEX=<<EOT
$(osslash $(TESTTEMP)/$(v)_$(t).xdv : $(TESTTEMP)/$(v)_$(t).tex test-suite/$(v).htex $($(f)_TARGET))
	$(XETEX) --no-pdf --output-directory=$(TESTTEMP) $(TESTTEMP)/$(v)_$(t).tex

EOT
TEST_OUTFILES=$(foreach t,$(foreach q,$(and $(or $(MAKE_OT),$(OT_SCRIPT),$($(f)_VTP)),ot) $(and $(or $($(f)_GDL),$(HAS_GDL)),gr),$(f)_$(q)),$(1))

TESTS=<<EOT
$(osslash test :: $(TESTTEMP) test-suite/results)

$(osslash pdfs :: $(TESTTEMP) test-suite/results)

$(osslash $(TESTTEMP) test-suite/results :)
	@- $(MKDIR) $@

testsvglang : GRSVGLANG=1

testsvglang : testsvg

$(foreach f,$(FONTS) $(EXTRA_TEST_FONTS),$(TEST_PER_FONT))

%.txt : %.htxt
	perl -CSD -pe $(Q)s/\\[uU]([0-9a-fA-F]+)/pack(q{U}, hex($$1))/oge$(Q) $< > $@

$(TESTS_EXTRA)
EOT

CLEAN_FILES+=$(.NL)$(foreach f,$(FONTS),$(.TAB)@-$$(RM) $(foreach v,$(TEST_FILES),$(foreach t,ot gr,test-suite/results/$(v)_$(f)_$(t).diff test-suite/$(v)_$(f)_$(t).pdf test-suite/$(v)_$(f)_$(t).tex,nonl) $(foreach t,gricu hbicu gr icu hb,test-suite/results/$(v)_$(f)_$(t).html test-suite/results/$(v)_$(f)_$(t)*.svg,nonl),nonl))
EXTRA_CLEAN_FILES+=$(.NL)$(foreach f,$(FONTS),$(.TAB)@-$$(RM) test-suite/results)


